package com.sample.agenttools.langgraph;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import org.bsc.langgraph4j.state.AgentState;
import org.bsc.langgraph4j.state.Channels;
import org.bsc.langgraph4j.state.Channel;

/**
 * Simple state management for chat memory.
 * This state holds a list of messages and allows appending new messages.
 */
public class MainGraphState extends AgentState {
    public static final String CHAT_HISTORY = "chat_history";

    // Define the schema for the state.
    // MESSAGES_KEY will hold a list of strings, and new messages will be appended.
    public static final Map<String, Channel<?>> SCHEMA = Map.ofEntries(
            Map.entry("chat_history", Channels.appender(() -> new ArrayList<org.springframework.ai.chat.messages.Message>())),
            Map.entry("summarization", Channels.appender(() -> new ArrayList<org.springframework.ai.chat.messages.Message>())),
            Map.entry("conversation_topic", Channels.base(null, null)),
            Map.entry("conversation_id", Channels.base(null, null)),
            //last user message id that triggered the graph run
            Map.entry("message_id", Channels.base(null, null)),
            Map.entry("current_node_start_time", Channels.base(null, null)),
            Map.entry("error_message", Channels.base(null, null)),
            Map.entry("success", Channels.base(null, null))
            );

    public MainGraphState(Map<String, Object> initData) {
        super(initData);
    }

    /**
     * Create the initial state for a new chat session.
     * @param chatHistory The existing chat history.
     * @param conversationId The ID of the conversation.
     * @param userId The ID of the user.
     * @return A map representing the initial state.
     */
    public static Map<String, Object> createInitialState(
            List<org.springframework.ai.chat.messages.Message> chatHistory,
            String conversationId,
            String userId
            ) {

        return Map.of(
                "chat_history", chatHistory,
                "conversation_id", conversationId,
                "user_id", userId,
                "start_time", LocalDateTime.now());
    }

    /**
     * Save an error message and mark the execution as unsuccessful.
     */
    public Map<String, Object> setError(String errorMessage) {
        return Map.of(
                "success", false,
                "error_message", errorMessage);
    }
    /**
     * Gets the summarization of the whole chat.
     */
    public String getSummarization(){
        var summary = this.<List<org.springframework.ai.chat.messages.Message>>value("summarization");
        return summary
                .orElse(List.of())
                .stream()
                .map(org.springframework.ai.chat.messages.Message::getText)
                .reduce("", (a, b) -> a + "\n" + b);
    }

    /**
     * Gets the topic of the conversation. It is generated by the LLM after the first message from the user.
     */
    public String getConversationTopic(){
        var topic = this.<List<String>>value("conversation_topic");
        return topic
                .orElse(List.of())
                .stream()
                .reduce("", (a, b) -> a + " " + b);
    }


    /**
     * Returns the chat history as a list of message contents
     * @return
     */
    public List<String> chatHistory() {
        var history = this.<List<org.springframework.ai.chat.messages.Message>>value(CHAT_HISTORY);
        return history
                .orElse(List.of())
                .stream()
                .map(org.springframework.ai.chat.messages.Message::getText)
                .toList();
   }
}
